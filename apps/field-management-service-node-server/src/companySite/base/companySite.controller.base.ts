/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanySiteService } from "../companySite.service";
import { CompanySiteCreateInput } from "./CompanySiteCreateInput";
import { CompanySite } from "./CompanySite";
import { CompanySiteFindManyArgs } from "./CompanySiteFindManyArgs";
import { CompanySiteWhereUniqueInput } from "./CompanySiteWhereUniqueInput";
import { CompanySiteUpdateInput } from "./CompanySiteUpdateInput";

export class CompanySiteControllerBase {
  constructor(protected readonly service: CompanySiteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompanySite })
  async createCompanySite(
    @common.Body() data: CompanySiteCreateInput
  ): Promise<CompanySite> {
    return await this.service.createCompanySite({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompanySite] })
  @ApiNestedQuery(CompanySiteFindManyArgs)
  async companySites(@common.Req() request: Request): Promise<CompanySite[]> {
    const args = plainToClass(CompanySiteFindManyArgs, request.query);
    return this.service.companySites({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompanySite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async companySite(
    @common.Param() params: CompanySiteWhereUniqueInput
  ): Promise<CompanySite | null> {
    const result = await this.service.companySite({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompanySite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompanySite(
    @common.Param() params: CompanySiteWhereUniqueInput,
    @common.Body() data: CompanySiteUpdateInput
  ): Promise<CompanySite | null> {
    try {
      return await this.service.updateCompanySite({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompanySite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompanySite(
    @common.Param() params: CompanySiteWhereUniqueInput
  ): Promise<CompanySite | null> {
    try {
      return await this.service.deleteCompanySite({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
