/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanySite } from "./CompanySite";
import { CompanySiteCountArgs } from "./CompanySiteCountArgs";
import { CompanySiteFindManyArgs } from "./CompanySiteFindManyArgs";
import { CompanySiteFindUniqueArgs } from "./CompanySiteFindUniqueArgs";
import { CreateCompanySiteArgs } from "./CreateCompanySiteArgs";
import { UpdateCompanySiteArgs } from "./UpdateCompanySiteArgs";
import { DeleteCompanySiteArgs } from "./DeleteCompanySiteArgs";
import { CompanySiteService } from "../companySite.service";
@graphql.Resolver(() => CompanySite)
export class CompanySiteResolverBase {
  constructor(protected readonly service: CompanySiteService) {}

  async _companySitesMeta(
    @graphql.Args() args: CompanySiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanySite])
  async companySites(
    @graphql.Args() args: CompanySiteFindManyArgs
  ): Promise<CompanySite[]> {
    return this.service.companySites(args);
  }

  @graphql.Query(() => CompanySite, { nullable: true })
  async companySite(
    @graphql.Args() args: CompanySiteFindUniqueArgs
  ): Promise<CompanySite | null> {
    const result = await this.service.companySite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanySite)
  async createCompanySite(
    @graphql.Args() args: CreateCompanySiteArgs
  ): Promise<CompanySite> {
    return await this.service.createCompanySite({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanySite)
  async updateCompanySite(
    @graphql.Args() args: UpdateCompanySiteArgs
  ): Promise<CompanySite | null> {
    try {
      return await this.service.updateCompanySite({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanySite)
  async deleteCompanySite(
    @graphql.Args() args: DeleteCompanySiteArgs
  ): Promise<CompanySite | null> {
    try {
      return await this.service.deleteCompanySite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
