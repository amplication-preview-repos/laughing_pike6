/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PasswordRecoveryLogService } from "../passwordRecoveryLog.service";
import { PasswordRecoveryLogCreateInput } from "./PasswordRecoveryLogCreateInput";
import { PasswordRecoveryLog } from "./PasswordRecoveryLog";
import { PasswordRecoveryLogFindManyArgs } from "./PasswordRecoveryLogFindManyArgs";
import { PasswordRecoveryLogWhereUniqueInput } from "./PasswordRecoveryLogWhereUniqueInput";
import { PasswordRecoveryLogUpdateInput } from "./PasswordRecoveryLogUpdateInput";

export class PasswordRecoveryLogControllerBase {
  constructor(protected readonly service: PasswordRecoveryLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PasswordRecoveryLog })
  async createPasswordRecoveryLog(
    @common.Body() data: PasswordRecoveryLogCreateInput
  ): Promise<PasswordRecoveryLog> {
    return await this.service.createPasswordRecoveryLog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PasswordRecoveryLog] })
  @ApiNestedQuery(PasswordRecoveryLogFindManyArgs)
  async passwordRecoveryLogs(
    @common.Req() request: Request
  ): Promise<PasswordRecoveryLog[]> {
    const args = plainToClass(PasswordRecoveryLogFindManyArgs, request.query);
    return this.service.passwordRecoveryLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PasswordRecoveryLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async passwordRecoveryLog(
    @common.Param() params: PasswordRecoveryLogWhereUniqueInput
  ): Promise<PasswordRecoveryLog | null> {
    const result = await this.service.passwordRecoveryLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PasswordRecoveryLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePasswordRecoveryLog(
    @common.Param() params: PasswordRecoveryLogWhereUniqueInput,
    @common.Body() data: PasswordRecoveryLogUpdateInput
  ): Promise<PasswordRecoveryLog | null> {
    try {
      return await this.service.updatePasswordRecoveryLog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PasswordRecoveryLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePasswordRecoveryLog(
    @common.Param() params: PasswordRecoveryLogWhereUniqueInput
  ): Promise<PasswordRecoveryLog | null> {
    try {
      return await this.service.deletePasswordRecoveryLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
